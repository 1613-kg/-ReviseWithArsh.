class Solution {
public:
    bool diff(string a,string b)
    {
        int cnt=0;
        for(int i=0;i<a.size();i++){
            if(a[i]!=b[i])cnt++;
        }
        return cnt==1;
    }
    int minMutation(string s, string e, vector<string>& bank) {
        map<string,vector<string>> m;
        for(int i=0;i<bank.size();i++){
            for(int j=i+1;j<bank.size();j++){
                if(diff(bank[i],bank[j])){
                    m[bank[i]].push_back(bank[j]);
                     m[bank[j]].push_back(bank[i]);
                }
            }
        }
        for(int i=0;i<bank.size();i++){
            if(diff(s,bank[i])){
                 m[s].push_back(bank[i]);
                     m[bank[i]].push_back(s);
            }
        }
        queue<pair<string,int>> q;
        q.push({s,0});
        int ans=0;
        set<string> st;
        st.insert(s);
        while(!q.empty())
        {
            string t = q.front().first;
            int ans = q.front().second;
            q.pop();
            for(auto &x:m[t]){
                if(!st.count(x)){
                    st.insert(x);
                    q.push({x,ans+1});
                }
            }
            if(st.count(e))return ans+1; 
        }
        return -1;
    }
};
