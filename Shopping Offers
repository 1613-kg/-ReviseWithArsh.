class Solution {
public:
     map<vector<int>,int> dp;
    int solve(vector<int>& price, vector<vector<int>>& special, vector<int> needs,int ind=0)
    {
        int n = price.size();
       if(ind>=n)return 0;
        if(dp.find(needs) !=dp.end())return dp[needs];
        if(needs[ind]==0)return dp[needs] = solve(price,special,needs,ind+1);
       int res = INT_MAX;
	int m = special.size();
	for(int j=0; j<m; j++) {
		bool flg = true;
		for(int k=0; k<n; k++) {
			if(special[j][k] > needs[k]) {
				flg = false;
				break;
			}
		}
		if(flg) {
			for(int k=0; k<n; k++) {
				needs[k] -= special[j][k];
			}
			res = min(res, special[j][n]+solve(price, special, needs, ind));
			for(int k=0; k<n; k++) {
				needs[k] += special[j][k];
			}
		}
	}
     needs[ind] -= 1;
     res = min(res,price[ind] + solve(price,special,needs,ind));
     needs[ind]+=1;
     return dp[needs]=res;
    }

    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        return solve(price,special,needs,0);
    }
};
