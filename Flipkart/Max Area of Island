class Solution {
public:
 
    void dfs(vector<vector<int>>& vis,vector<vector<int>>& grid,int r,int c,int& temp)
    {
        int n = grid.size();
        int m = grid[0].size();
        vis[r][c]=1;
        temp++;
        int dx[] = {-1,0,1,0};
        int dy[] = {0,1,0,-1};

        for(int i=0;i<4;i++){
            int nrow = dx[i] + r;
            int ncol = dy[i] + c;
            if((nrow>=0 && nrow<n) && (ncol>=0 && ncol<m) && !vis[nrow][ncol] && grid[nrow][ncol]==1){
                //vis[nrow][ncol]=1;
                //temp++;
                dfs(vis,grid,nrow,ncol,temp);
            }
        }
    }

    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int n=grid.size();
        int m = grid[0].size();
        int ans=0;
        vector<vector<int>> vis(n,vector<int>(m,0));
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]==1){
                    int temp=0;
                    dfs(vis,grid,i,j,temp);
                    ans=max(ans,temp);
                }
            }
        }
        return ans;
    }
};
