class Solution {
public:
     vector<bool> vis;
    bool solve(vector<int>& a,int n,int k,int target,int sum,int ind)
   {
       if(k==1)
       {
          //ans=true;
          return true;
       }
       if(sum>target)
       {
           return false;
       }
       if(sum==target)
       {
           return solve(a,n,k-1,target,0,0);
       }
       for(int i=ind;i<n;i++)
       {
           if(vis[i]==false && sum+a[i]<=target)
           {
               vis[i]=true;
               sum+=a[i];
               if(solve(a,n,k,target,sum,i+1))return true;
               sum-=a[i];
               vis[i]=false;
               if(sum==0)break;
           }
       }
       return false;
   }

    bool canPartitionKSubsets(vector<int>& nums, int k) {
         if(k==1)return true;
        int n = nums.size();
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
        }
        if(k>n || sum%k)return false;
       vis.assign(n,false);
       sum/=k;
        return solve(nums,n,k,sum,0,0);
    }
};
