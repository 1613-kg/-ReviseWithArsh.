/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* removeZeroSumSublists(ListNode* head) {
        if(!head)return NULL;
       unordered_map<int,ListNode*> m;
       ListNode* dummy = new ListNode(0);
       m[0] = dummy;
       dummy->next = head;

       int sum=0;
       while(head)
       {
           sum += head->val;
           if(m.find(sum)!=m.end()){
              ListNode* start = m[sum];
              int temp=sum;
              while(start && start!=head){
                  start = start->next;
                  temp += start->val;
                  if(start!=head)m.erase(temp);
              }
              m[sum]->next = head->next;
           }
           else{
               m[sum] = head;
           }
            head=head->next;
       }
       return m[0]->next;
    }
};
