/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int solve(TreeNode* root,map<TreeNode*,int>& m)
    {
        if(!root){
            return 0;
        }

        // if(!root->left && !root->right){
        //     return root->val;
        // }
         if(m.find(root)!=m.end())return m[root];
         int inc = root->val;
         if(root->left){
             inc += solve(root->left->left,m) + solve(root->left->right,m);
         }
         if(root->right){
              inc += solve(root->right->left,m) + solve(root->right->right,m);
         }

         int exc = solve(root->left,m) + solve(root->right,m);
        
        return m[root] = max(inc,exc);
    }

    int rob(TreeNode* root) {
        map<TreeNode*,int> m;
        return solve(root,m);
    }
};
