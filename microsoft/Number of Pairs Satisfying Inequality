class Solution {
public:
    long long ans;
   void checkCount(vector<int>& nums, int start, int mid, int end,int d)
    {   
        int l = start, r = mid + 1;
        while(l <= mid && r <= end)
        {
            if(nums[l]<=(nums[r]+d))  
            {
                ans += (end - r+1);
                l++;
            }
            else  r++;
        }
        sort(nums.begin() + start, nums.begin() + end + 1); 
        return;
         
    }
    void divide(vector<int>& nums, int start, int end,int d)
    {
        if(start == end) 
            return;
        
        int mid = (start + end)/2;
        divide(nums,start, mid,d);
       divide(nums,mid+1,end,d);
        
        checkCount(nums,start,mid,end,d);
        return;
    }

    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff) {
         ans=0;
        int n = nums1.size();
        vector<int> nums(n);
        for(int i=0;i<n;i++){
            nums[i] = nums1[i] - nums2[i];
        }
         divide(nums,0,n-1,diff);
         return ans;
    }
};
