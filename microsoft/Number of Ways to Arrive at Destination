class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<int,int>> adj[n];
        for(auto &x:roads){
           adj[x[0]].push_back({x[1],x[2]});
           adj[x[1]].push_back({x[0],x[2]});
        }
        priority_queue<pair<long long,long long>,vector<pair<long long,long long>>,greater<pair<long long,long long>>> q;
        vector<long long > ans(n,0);
        ans[0] = 1;
        vector<long long> dist(n,1e15);
        dist[0]=0;
        q.push({0,0});
        int mod=1e9+7;
        while(!q.empty())
        {
            long long node = q.top().second;
            long long d = q.top().first;
            q.pop();

            for(auto &x:adj[node])
            {
                long long adjNode = x.first;
                long long wt = x.second;
                if(wt+d<dist[adjNode]){
                    dist[adjNode] = wt + d;
                    q.push({dist[adjNode],adjNode});
                    ans[adjNode] = ans[node];
                }
                else if(wt+d==dist[adjNode]){
                    ans[adjNode] = (ans[adjNode] + ans[node])%mod;
                }
            }
        }
        // for(auto &x:dist){
        //     cout<<x<<" ";
        // }
        //cout<<endl;
        return ans[n-1];
    }
};
