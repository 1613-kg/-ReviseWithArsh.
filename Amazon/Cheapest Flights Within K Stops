class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& f, int src, int dst, int k) {
        vector<pair<int,int>> adj[n];
        for(int i=0;i<f.size();i++){
            adj[f[i][0]].push_back({f[i][1],f[i][2]});
        }
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> q;
        vector<int> dist(n,1e9);
        dist[src]=0;
        q.push({0,{0,src}});
        while(!q.empty())
        {
            auto t = q.top();
            q.pop();
            int stops = t.first;
            int node = t.second.second;
            int cost = t.second.first;
            if(stops>k)continue;
            for(auto &x:adj[node]){
                int adjNode = x.first;
                int adjCost = x.second;
                if(cost + adjCost<dist[adjNode] && stops<=k){
                    dist[adjNode] = cost+adjCost;
                    q.push({stops+1,{dist[adjNode],adjNode}});
                }
            }
        }
        if(dist[dst]==1e9)return -1;
        else return dist[dst];
    }
};
