class Solution {
public:
    int maxSumMinProduct(vector<int>& nums) {
          int n = nums.size();
          vector<long long> prefix(n+1,0),left(n,0),right(n,n);

          //calculating prefix sum
          for(int i=1;i<=n;i++){
              prefix[i] = prefix[i-1] + (long long)nums[i-1];
          }
          //next smaller in left
          stack<int> s;
          for(int i=0;i<n;i++){
              while(!s.empty() && nums[s.top()]>nums[i]){
                  right[s.top()] = i;
                  s.pop();
              }
              s.push(i);
          }
          while(!s.empty())s.pop();
           for(int i=n-1;i>=0;i--){
              while(!s.empty() && nums[s.top()]>nums[i]){
                  left[s.top()] = i+1;
                  s.pop();
              }
              s.push(i);
          }
          long long ans = 0;
          for(int i=0;i<n;i++){
              long long temp = (prefix[right[i]]-prefix[left[i]])*nums[i];
              ans = max(ans*1ll,temp*1ll);
          }
        //   for(auto &x:prefix){
        //       cout<<x<<" ";
        //   }
        //   cout<<endl;
        //   for(auto &x:right){
        //       cout<<x<<" ";
        //   }
        //   cout<<endl;
        //   for(auto &x:left){
        //       cout<<x<<" ";
        //   }
        //   cout<<endl;
          int mod = 1e9+7;
          int final = ans%mod;
          return final;
    }
};
