class Solution {
public:
    int dx[4] = {-1,0,1,0};
    int dy[4] = {0,-1,0,1};
    int dp[51][51][2501];
    bool isSafe(int i,int j,int n,vector<vector<int>> &vis)
    {
        if((i>=0 && i<n) && (j>=0 && j<n) && vis[i][j]==0)return true;
        else return false;
    }
    
    int dfs(int row,int col,int n,vector<vector<int>>& grid,int temp,vector<vector<int>> &vis)
    {
        if(!isSafe(row,col,n,vis))return INT_MAX;
        temp = max(temp,grid[row][col]);
        if(row==n-1 && col==n-1){
           return temp;
        }
        if(dp[row][col][temp]!=-1)return dp[row][col][temp];
        vis[row][col]=1;
        int a = dfs(row+1,col,n,grid,temp,vis);
         int b = dfs(row,col-1,n,grid,temp,vis);
          int c = dfs(row,col+1,n,grid,temp,vis); 
          int d = dfs(row-1,col,n,grid,temp,vis);
        vis[row][col]=0;
          return dp[row][col][temp] = min({a,b,c,d});
    }

    int swimInWater(vector<vector<int>>& grid) {
        int ans = INT_MAX;
        int n = grid.size();
        vector<vector<int>> vis(n,vector<int> (n,0));
        memset(dp,-1,sizeof(dp));
        return dfs(0,0,grid.size(),grid,-1,vis);
        //return ans;
    }
};
